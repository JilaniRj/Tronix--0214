import pandas as pd #to represent data in rows and columns
import matplotlib.pyplot as plt #to represent data in terms of graphs and charts
from datetime import datetime # for time like year,month,day,hour,minutes
import random # to import random number
import time
# Function to load historical data from a CSV file
def load_historical_data(file_path):
    return pd.read_csv(file_path, parse_dates=['timestamp'])
# Function to generate random real-time data
def generate_realtime_data():#def is for to define a function
    return { #A return statement is used to end the execution of the function call and “returns” the result
        'timestamp': datetime.now(),#encoded information of the date and time at which a particular event has occurred.
        'efficiency': random.uniform(80, 100)
    }
# Function to update real-time data and save it to a CSV file
def update_realtime_data(file_path, interval_seconds=60):
    while True: #If we write while True then the loop will run forever.
        new_data = generate_realtime_data()
        df = pd.DataFrame([new_data])
        df.to_csv(file_path, mode='a', header=False, index=False)
        time.sleep(interval_seconds)
# Function to plot historical efficiency metrics
def plot_historical_data(df):
    plt.figure(figsize=(10, 6))
    plt.plot(df['timestamp'], df['efficiency'], marker='o', linestyle='-', color='b')
    plt.title('Historical Equipment Efficiency Metrics')
    plt.xlabel('Timestamp')
    plt.ylabel('Efficiency (%)')
    plt.grid(True)
    plt.show()
if __name__ == "__main__": #if two files are present then to execute particular file it is used
    # Load historical data
    historical_file_path = 'historical_data.csv'
    historical_data = load_historical_data(historical_file_path)
    # Plot historical data
    plot_historical_data(historical_data)
    # Simulate real-time data and update the CSV file
    # Uncomment the next line to run real-time simulation (Ctrl + / on most IDEs)
    # update_realtime_data('historical_data.csv', interval_seconds=60)

