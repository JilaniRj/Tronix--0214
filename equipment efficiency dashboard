import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px
import random
from datetime import datetime, timedelta
# Sample data (replace this with your real-time and historical data)
data = pd.DataFrame({
    'Timestamp': [datetime.now() - timedelta(minutes=i) for i in range(100)],
    'Equipment Efficiency': [random.uniform(80, 95) for _ in range(100)]
})
# Initialize the Dash app
app = dash.Dash(__name__)
# Define the layout of the dashboard
app.layout = html.Div(children=[
    html.H1(children='Equipment Efficiency Dashboard'),
    dcc.Graph(
        id='real-time-chart',
        config={'displayModeBar': False}
    ),
    dcc.Graph(
        id='historical-chart',
        config={'displayModeBar': False}
    ),
    dcc.Interval(
        id='interval-component',
        interval=10*1000,  # in milliseconds, update every 10 seconds
        n_intervals=0
    )
])
# Define callback to update real-time chart
@app.callback(
    Output('real-time-chart', 'figure'),
    [Input('interval-component', 'n_intervals')]
)
def update_real_time_chart(n):
    # Add real-time data update logic here
    # For example, you can fetch new data from a source and update the chart
    real_time_data = pd.DataFrame({
        'Timestamp': [datetime.now()],
        'Equipment Efficiency': [random.uniform(80, 95)]
    })
    fig = px.line(real_time_data, x='Timestamp', y='Equipment Efficiency', title='Real-time Efficiency')
    return fig
# Define callback to update historical chart
@app.callback(
    Output('historical-chart', 'figure'),
    [Input('interval-component', 'n_intervals')]
)
def update_historical_chart(n):
    # Add historical data update logic here
    # For example, you can fetch historical data from a database and update the chart
    fig = px.line(data, x='Timestamp', y='Equipment Efficiency', title='Historical Efficiency')
    return fig
# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)



